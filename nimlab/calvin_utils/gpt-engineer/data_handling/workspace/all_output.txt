Based on the requirements, here are the core classes, functions, and methods that will be necessary:

1. `FileWriter` class: Responsible for writing the "hello world" text to a file.

- `write_to_file(filename: str, text: str, append: bool) -> None`: Writes the given text to the specified file. If `append` is `True`, the text will be appended to the file if it exists, otherwise a new file will be created.

Now, let's proceed with creating the necessary files.

**file_writer.py**
```python
import os

class FileWriter:
    @staticmethod
    def write_to_file(filename: str, text: str, append: bool) -> None:
        mode = 'a' if append else 'w'
        with open(filename, mode) as file:
            file.write(text)

```

**main.py**
```python
from file_writer import FileWriter

def main():
    filename = 'hello.txt'
    text = 'Hello, world!'
    append = True

    FileWriter.write_to_file(filename, text, append)

if __name__ == '__main__':
    main()
```

**requirements.txt**
```
dataclasses
```

In this implementation, we have two files:
1. `file_writer.py`: Contains the `FileWriter` class with the `write_to_file` method responsible for writing the text to a file.
2. `main.py`: The entrypoint file that imports the `FileWriter` class and calls the `write_to_file` method to write the "hello world" text to a file.

The `requirements.txt` file specifies the `dataclasses` package as a dependency.

Please note that the code provided is a basic implementation to fulfill the requirements. Additional error handling and input validation can be added as per the specific needs of the application.