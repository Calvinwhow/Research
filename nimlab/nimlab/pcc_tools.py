# Tools for working with the precomputed connectome
# Author: Christopher Lin: <clin5@bidmc.harvard.edu>
# Author: William Drew: <wdrew@bwh.harvard.edu>

import h5py
import csv
import numpy as np
from nilearn import image


class PrecomputedConnectome:
    """Represents a precomputed connectome (PCC).

    Note:
        This library only handles images in 91x109x91 MNI space

    Attributes:
        pcc (h5py.File): The HDF5 connectome
        mapping (int[]): A mapping where the index is index in the pcc, and the integer is the index of the voxel in MNI space when flattened Fortran style. This is should be stored in dataset_info.mat as dataset_info.mat

    Args:
        pcc_path(str): Path to the HDF5 connectome
        mapping_path(str): Path to the mapping file (in csv format)
    """

    def __init__(self, pcc_path, mapping_path):
        self.pcc = h5py.File(pcc_path)["X"]
        map_list = []
        with open(mapping_path) as csvfile:
            reader = csv.reader(csvfile, delimiter=" ", quotechar="|")
            for row in reader:
                map_list.append(int(row[0]))
        self.mapping = map_list

    def mask_to_pcc(self, img):
        """Converts a mask in MNI space to a list of pcc indices

        Args:
            img(Niimg-like object): nibabel niimg-like object containing the mask

        Returns:
            int[]: A list of indices into the pcc
        """
        if img.get_fdata().shape != (91, 109, 91):
            raise Exception("Image must have dimensions 91x109x91")
        img_flat = img.get_fdata().flatten("F")
        indices = []
        for i in range(0, len(self.mapping)):
            if (
                img_flat[self.mapping[i] - 1] > 0
            ):  # We have to subtract 1, since MATLAB indexes starting at 1
                indices.append(i)
        return indices

    def pcc_to_img(self, pcc_col, ref):
        """Converts a column from the pcc (or any vector in the pcc space) to an image

        Note:
            The column must be of the same length as the mapping file. This means you must truncate any padding that was added.

        Args:
            pcc_col(int[]): A vector from the pcc
            ref(niimg-like object): An reference image to define the dimensions of the image  generated by this function

        Returns:
            Niimg-like object: Image created from the pcc column
        """
        if ref.get_fdata().shape != (91, 109, 91):
            raise Exception("Image must have dimensions 91x109x91")
        pcc_data_mat = np.zeros(ref.shape)
        pcc_data_inds = np.unravel_index(self.mapping, ref.shape, order="F")
        for i in range(0, len(self.mapping)):
            pcc_data_mat[
                pcc_data_inds[0][i], pcc_data_inds[1][i], pcc_data_inds[2][i]
            ] = pcc_col[i]
        return image.new_img_like(ref, pcc_data_mat)


class NiftiMasker:
    """A Faster NiftiMasker.
    Attributes:
        mask_img (nibabel.nifti1.Nifti1Image): Nifti binary mask.
        mask_idx (numpy.ndarray): 1D numpy.ndarray containing indexes from
            flattened mask image.
        mask_shape (3-tuple of ints): Shape of mask_idx.
        mask_size (int): Number of voxels in entire space, including
            outside the brain.

    """

    def __init__(self, mask_img=None):
        """
        Args:
            mask_img (str): File path to brain mask Nifti file.
        """
        self.mask_img = image.load_img(mask_img)
        mask_data = self.mask_img.get_fdata()
        (self.mask_idx,) = np.where(mask_data.flatten())
        self.mask_shape = mask_data.shape
        self.mask_size = np.prod(self.mask_shape)

    def transform(self, niimg=None):
        """Masks 3D Nifti file into 1D array.
        Args:
            niimg (nibabel.nifti1.Nifti1Image): Nifti to transform.
        Returns:
            region_signals (1D numpy.ndarray): Masked Nifti file.
        """
        return np.take(image.get_data(niimg).flatten(), self.mask_idx)

    def inverse_transform(self, flat_niimg=None):
        """Unmasks 1D array into 3D Nifti file.
        Args:
            flat_niimg (1D numpy.ndarray): 1D array to unmask.
        Returns:
            niimg (nibabel.nifti1.Nifti1Image): Unmasked Nifti.
        """
        new_img = np.zeros(self.mask_size)
        new_img[self.mask_idx] = flat_niimg
        return image.new_img_like(self.mask_img, new_img.reshape(self.mask_shape))

    def mask(self, niimg=None):
        """Masks 3D Nifti file into Masked 3D Nifti file.
        Args:
            niimg (nibabel.nifti1.Nifti1Image): Nifti to mask.
        Returns:
            masked_niimg (nibabel.nifti1.Nifti1Image): Masked Nifti file.
        """
        return self.inverse_transform(self.transform(niimg))
